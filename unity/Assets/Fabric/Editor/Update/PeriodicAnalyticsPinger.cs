namespace Fabric.Internal.Editor.Update
{
	using UnityEngine;
	using UnityEditor;
	using Fabric.Internal.Editor.Model;
	using Fabric.Internal.Editor;
	using System;
	using System.IO;
	using System.Collections;
	using System.Collections.Generic;
	using System.Net;

	[InitializeOnLoad]
	public static class PeriodicPinger
	{
		private const int interval = 1000 * 60 * 30;  // 30 minutes
		private static readonly string installIdFile = Path.Combine (
			FileUtils.Root,
			FileUtils.NormalizePathForPlatform ("Fabric/InstallId")
		);
		private const string installIdFileTemplate = "# This file is auto-generated by Crashlytics. Please check it into source control.\n{0}";
#pragma warning disable 0414
		private static Analytics.PeriodicPing analytics;
#pragma warning restore 0414

		private delegate void EnqueueEventDelegate(Analytics.Events.AnalyticsEvent analyticsEvent);
		private static EnqueueEventDelegate EnqueueEvent = EnqueueToAnalytics;

		static PeriodicPinger()
		{
			// When in batch mode:
			// Make event queueing a no-op
			// Don't initialize PeriodicPing analytics.
			if (UnityEditorInternal.InternalEditorUtility.inBatchMode) {
				EnqueueEvent = EnqueueNoOp;
				return;
			}

			try {
				if (!File.Exists (installIdFile)) {
					using (File.Create (installIdFile)) {}
				}

				string installId = ExtractInstallId (File.ReadAllLines (installIdFile));

				if (String.IsNullOrEmpty (installId)) {
					installId = Guid.NewGuid ().ToString ();
					Utils.Log ("Generated a new install id {0}", installId);
					File.WriteAllText (installIdFile, String.Format (installIdFileTemplate, installId));
				}

				analytics = new Analytics.PeriodicPing (
					interval,
					installId,
					Fabric.Internal.Editor.Info.Version.ToString (),
					(System.Net.WebException e) => {
						if (Net.Utils.IsNetworkUnavailableFrom (e)) {
							return;
						}

						Utils.Log ("Couldn't report plugin event, {0}", e.Message);
					},
					() => {}
				);
			} catch (Exception e) {
				Utils.Log ("Couldn't manipulate file 'Assets/Fabric/InstallId'; {0}", e.Message);
				return;
			}
		}

		public static void Enqueue(Analytics.Events.AnalyticsEvent analyticsEvent)
		{
			EnqueueEvent (analyticsEvent);
		}

		private static string ExtractInstallId (string[] lines)
		{
			foreach (string line in lines) {
				string trimmed = line.Trim ();

				// Find the first line that isn't a comment.
				if (!trimmed.StartsWith ("#")) {
					return trimmed;
				}
			}

			return null;
		}

		private static void EnqueueToAnalytics(Analytics.Events.AnalyticsEvent analyticsEvent)
		{
			analyticsEvent.Version = Fabric.Internal.Editor.Info.Version.ToString ();
			analytics.Enqueue (analyticsEvent);
		}

		private static void EnqueueNoOp(Analytics.Events.AnalyticsEvent analyticsEvent)
		{
		}
	}
}
